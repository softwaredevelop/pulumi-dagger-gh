package main

import (
	"ci/util"
	"context"
	"os"
	"path/filepath"
	"testing"

	"dagger.io/dagger"
	"github.com/stretchr/testify/require"
)

func TestPulumiLocalSource(t *testing.T) {
	t.Parallel()
	ctx := context.Background()

	c, err := dagger.Connect(ctx, dagger.WithLogOutput(os.Stdout))
	require.NoError(t, err)
	defer c.Close()

	c = c.Pipeline("cd")
	require.NotNil(t, c)

	id, err := c.
		Container().
		// From("busybox:glibc").
		From("golang:alpine").
		WithMountedTemp("/mountedtmp").
		ID(ctx)
	require.NoError(t, err)
	require.NotEmpty(t, id)

	dir, _ := os.Getwd()
	p := filepath.Join(dir, "..", "lcs")
	require.NoError(t, err)
	require.NotEmpty(t, p)

	mountedDir := "/mountedtmp"
	id, err = util.MountedHostDirectory(c, id, p, mountedDir).
		ID(ctx)
	require.NoError(t, err)
	require.NotEmpty(t, id)

	id, err = PulumiInstall(c, id).
		Pipeline("pulumi").
		WithWorkdir(mountedDir).
		WithEnvVariable("PULUMI_SKIP_UPDATE_CHECK", "true").
		WithEnvVariable("PULUMI_CONFIG_PASSPHRASE", "").
		WithExec([]string{"pulumi", "login", "--local"}).
		ID(ctx)
	require.NoError(t, err)
	require.NotEmpty(t, id)

	reMatching := "TestNewStackLocalSourceWorkspaceEnvVars$"
	_, err = c.Container(dagger.ContainerOpts{ID: id}).
		Pipeline("pulumi-local-source").
		WithWorkdir(mountedDir).
		WithExec([]string{"go", "test", "-v", "-run", reMatching}).
		Stdout(ctx)
	require.NoError(t, err)

	_, err = c.Container(dagger.ContainerOpts{ID: id}).
		Pipeline("pulumi-local-source").
		WithWorkdir(mountedDir).
		WithExec([]string{"go", "test", "-v", "main_test.go"}).
		Stdout(ctx)
	require.NoError(t, err)
}
